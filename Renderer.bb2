statement drawMonsterAtLocation{location, subloc,  *monster.MonsterInstance}
    Shared CMazeDr.MazeDir(), CMazePos.MazePos()
    shared monsters()
    
       dbugprintstring{"BLAH"}
    resetlist monsters()
    while(NextItem(monsters()))
    y.b = CMazePos.MazePos(location)\yDelta
    x.b = -CMazePos.MazePos(location)\xDelta

    y+1
    dbugprintval{y.b}
    Select y.b
      case 0
    ;  if monsters()\frameIndex[4] <> 0
        ClipBlit monsters()\frameIndex[4], monsters()\screenX[4]-(x.b*monsters()\width[4]),monsters()\screenY[4]
      ;  end if
      Case -1
     ;   if monsters()\frameIndex[3] <> 0
        ClipBlit monsters()\frameIndex[3], monsters()\screenX[3]-(x.b*monsters()\width[3]),monsters()\screenY[3]
     ;  end if
      case -2
     ; if monsters()\frameIndex[2] <> 0
        ClipBlit monsters()\frameIndex[2], monsters()\screenX[2]-(x.b*monsters()\width[2]),monsters()\screenY[2]
      ;  end if
      case -3
     ; if monsters()\frameIndex[1] <> 0
        ClipBlit monsters()\frameIndex[1], monsters()\screenX[1]-(x.b*monsters()\width[1]),monsters()\screenY[1]
      ;  end if
      case -4
    End Select
    
    wend
   dbugprintstring{"BLAH"}
end statement
Statement drawView{}

  Shared gd.GameData
  Shared walls(),wl()
  Shared CMazeDr.MazeDir(), CMazePos.MazePos()
  Shared CMazeItem()
  shared wallslookup(), currentView()
  Shared *currentLevel.Level
  Shared bkgindex, currentBuffer, eventCount
  Shared items(), itemviews(), propviews(), le()
  shared aliveMonsters()
  ; render the background, saves shapes, and does a cls of the view.
  ; drawing this rect makes the palette shift to the next colour bank by abusing the way blitz only writes the 5 bitplanes
  ; of the shape, therefore by clearing with a colour that sets the 6th bitplane, I can shift the images up a colour bank
  ; and not have the extra draw times, renders the level FASTER!
  dim monsterviews.w(17,4) ; there can be upto 4 monsters in location.

  shouldDraw = True
  
  if shouldDraw = True
    realFacing.b = gd\playerFacing
    BitPlanesBitMap #wallBuffer, 6, %00111111
    use bitmap 6
    cls 32
    ;Boxf 0,00,240,176, 32

   ; Blit bkgindex,0,0,%1
    BlockScroll bkgindex*240,0,240,176,0,0,#DungeonFloorBitmap 
    BitPlanesBitMap #wallBuffer, 6, %00011111
    use bitmap 6

    px = gd\playerLocation MOD 32;
    py = gd\playerLocation / 32;div(int(pos), 32).quot;
    ;dbugprintval{px}
    ;dbugprintval{py}
    ;dbugprintval{gd\playerFacing}
    for i=0 to 17
      
      x.b = 0
      y.b = 0
      if ((realFacing.b MOD 2) <> 0)
        x = CMazeDr(realFacing.b)\xs * CMazePos(i)\yDelta;
        y = CMazeDr(realFacing.b)\ys * CMazePos(i)\xDelta;
      else
        x = CMazeDr(realFacing.b)\xs * CMazePos(i)\xDelta;
        y = CMazeDr(realFacing.b)\ys * CMazePos(i)\yDelta;				
      Endif
      ;dr = ((realFacing.b + CMazePos(i)\facing) & $03);
      ;NPrint "I: " + str$(i)+" X: " + str$(x) + " Y: " +str$(y) + " dr:" + str$(dr): 
      mazePos.w = (((y + py) & $1f) * 32) + ((x + px) & $1F) 
      wmi.b = *currentLevel\walldata[mazePos.w*4]
      arx = CMazePos(i)\xDelta+3
      ary = CMazePos(i)\yDelta+3
      currentView(i) = wmi.b
      itemviews(i) = 0 : propviews(i) = 0
      ; Zero monsters too.
      monsterviews(i,0) = 0 : monsterviews(i,1) = 0 
      monsterviews(i,2) = 0 : monsterviews(i,3) = 0
      resetlist items()
      while NextItem(items())
        if items()\pos = mazePos.w and items()\level = 1
          itemviews(i) = 1+items()\icon
        end if
      wend

      resetlist aliveMonsters()
      realx.w = x+px
      realy.w = y+py
      ;dbugprintstring{"RealX: " +Str$(realx) + " RealY: " +Str$(realy)}
      while NextItem(aliveMonsters())
        
        ;dbugprintstring{"MonX: " +Str$(aliveMonsters()\x) + " MonY: " +Str$(aliveMonsters()\y)}
        
        if (aliveMonsters()\x = realx)
            if (aliveMonsters()\y = realy)
                mi=0
                ;for mi = 0 to 3
                    dbugprintstring{"MATCHED " + str$(mi)}
                    
                    ;if (monsterviews(i,mi) = 0)
                        monsterviews(i,mi) = 1;&aliveMonsters()

                  ;      goto skipmon
                   ; end if
            ;next
            end if
        end if
        ;skipmon:
      wend
      mex.w = (x + px)
      mey.w = (y + py)
      ;dbugprintval{eventCount}
      for p=0 to eventCount -1
        ;dbugprintstring{str$(mex) + " " + str$(mey)}
        if ( mex= le(p)\mapX and mey = le(p)\mapY)
          Select (le(p)\eventType)
            case 11
              propviews(i) = 10
            case 10
              propviews(i)= 12
            case 1
              propviews(i) = 2
            case 2
              propviews(i) = 2
            case 3
              propviews(i) = 2
            case 4
              propviews(i) = 2
            case 5 
              propviews(i) = 2
          End Select  
        end if
      next
    next
        if currentView(14) > 0
          if  currentView(15) > 0
            if currentView(16) > 0
        for i=0 to 13
          currentView(i) = 0 : propviews(i)=0 : itemviews(i) =0
          monsterviews(i,0) = 0
          
        next
        
      endif : endif : endif

      if currentView(12) > 0
        if  currentView(13) > 0
          if  currentView(14) > 0
            for i=0 to 11
              currentView(i) = 0 : propviews(i)=0 : itemviews(i) =0
               monsterviews(i,0) = 0
            next
        
      endif : endif : endif

      if currentView(8) > 0
        if  currentView(10) > 0
          if  currentView(11) > 0
            for i=0 to 7
              currentView(i) = 0 : propviews(i)=0 : itemviews(i) =0
            next
        currentView(9) =0
        
      endif : endif : endif

      if currentView(14) > 0
        currentView(11) = 0 : propviews(11)=0 : itemviews(11) =0
        currentView(6) = 0 : propviews(6)=0 : itemviews(6) =0

      endif
      if currentView(15) > 0
        currentView(0) = 0 : propviews(0)=0 : itemviews(0) =0
        currentView(1) = 0 : propviews(1)=0 : itemviews(1) =0
        currentView(7) = 0 : propviews(7)=0 : itemviews(7) =0
      endif
      if currentView(16) > 0
        currentView(3) = 0 : propviews(2)=0 : itemviews(3) =0
        currentView(4) = 0 : propviews(4)=0 : itemviews(4) =0
        currentView(9) = 0 : propviews(9)=0 : itemviews(9) =0
        
      endif
      if currentView(11) > 0      
        currentView(6) = 0 : propviews(6)=0 : itemviews(6) =0
      endif
  
      for i = 0 to 17

        wmi.b = currentView(i)
        if (wmi.b = 4)
          wmi.b = 2
        end if
       if (wmi.b = 5)
          wmi.b = 3
        end if
        if (wmi.b <> 0)
    
          ResetList walls()
          While(NextItem (walls()))
            if(walls()\walltype = wmi); or (walls()\walltype = 1 and wmi.b = 2 ) or (walls()\walltype = 2 and wmi.b=3))
              tx.b =walls()\locationX
              ty.b= walls()\locationY
              if (tx = CMazePos(i)\xDelta) 
                if (ty = CMazePos(i)\yDelta)
                  Blit walls()\shapeIndex, walls()\screenX, walls()\screenY,%1

                  if (i = 14)
                    if (wmi.b = 3)
                      ix.w = CMazeItem(i)\xs
                      iy.w = CMazeItem(i)\ys
                      boxf ix+20,iy-110,ix-10, iy-100,88
                    endif
                    if (wmi.b = 2)
                      ix.w = CMazeItem(i)\xs
                      iy.w = CMazeItem(i)\ys
                      boxf ix+20,iy-110,ix-10, iy-100,66
                    endif
                   endif
                ;if wmi.b = 2
                  ; closed door
                ;  Boxf walls()\screenX+4, walls()\screenY+4, walls()\screenX+walls()\width, walls()\screenY+walls()\height,48
                ;endif
                  
              ;Pop While              
              EndIf : Endif
            Endif
          Wend
       
       
          ; tx.b = CMazePos(i)\xDelta
          ; ty.b = CMazePos(i)\yDelta
          ; sx.w = wl(tx+4,-ty,wmi,1)\screenX
          ; sy.w = wl(tx+4,-ty,wmi,1)\screenY
          ; si.w = wl(tx+4,-ty,wmi,1)\shapeIndex
          ; if (si)
          ;   Blit si,sx,sy,%1
          ; endif
          ; sx.w = wl(tx+4,-ty,wmi,0)\screenX
          ; sy.w = wl(tx+4,-ty,wmi,0)\screenY
          ; si.w = wl(tx+4,-ty,wmi,0)\shapeIndex
          ; if (si)
          ;   Blit si,sx,sy,%1
          ; endif
          
        Endif
        ; props/decals are next    
        if (propviews(i) > 0 and i < 15)
        ;     use bitmap currentBuffer
          ix.w = CMazeItem(i)\xs
          iy.w = CMazeItem(i)\ys
          if ix = 0 and iy=0
          else
          ;Blit #UIItems + itemviews(i)-1, ix-8,iy-8,%01
          boxf ix-(2*propviews(i)),iy-(7*propviews(i)),ix+(3*propviews(i)), iy,64+propviews(i)
          end if
        endif 

        ; then the items
        if (itemviews(i) > 0 and i < 15)
        ;     use bitmap currentBuffer
          ix.w = CMazeItem(i)\xs
          iy.w = CMazeItem(i)\ys
          if ix = 0 and iy=0
          else

          Blit #UIItems + itemviews(i)-1, ix-8,iy-8,%10
          end if
        endif
        
        ; Finally the monsters
        for mi=0 to 3
            if (monsterviews(i,mi) >0)
            drawMonsterAtLocation{i,mi,monsterviews(i,mi)}
            end if
        next
    Next
    use bitmap currentBuffer
    else
    drawMap{}
    end if
    
End Statement


statement drawDecals{}
  Shared gd.GameData
  Shared walls()
  Shared CMazeDr.MazeDir(), CMazePos.MazePos()
  shared wallslookup(), currentView()
  Shared *currentLevel.Level
  Shared bkgindex, currentBuffer
end Statement

Statement drawItems{}
  Shared gd.GameData
  Shared walls()
  Shared CMazeDr.MazeDir(), CMazePos.MazePos()
  shared wallslookup(), currentView()
  Shared *currentLevel.Level
  Shared bkgindex, currentBuffer
End Statement 

propidx.w =0
Statement  drawBattery{}
  Shared gd.GameData
  Shared bkgindex, currentBuffer
  shared gameEnd
  shared propidx.w
  ratio.q = gd\player\sp / gd\player\maxsp
  round.w = ratio.q * 10
  ;dbugprintval{round.w}
  
  if (round > -1)
    BBlit currentBuffer, #UIShapeStart + round, 67,195
  else
    gameEnd = 3
  end if
End Statement

; Statement drawMonsterAtLocation{posX.b, posY.b,cellIndex.b}
;     shared aliveMonsters()
;     shared gd.GameData
;     resetlist aliveMonster()

;     while (NextItem(aliveMonsters()))
;         if (aliveMonsters\x = posX)
;             if (aliveMonsters\y = posY)
;                 ; there is a monster here.
;             end if     
;         end if 
;     wend
; end Statement