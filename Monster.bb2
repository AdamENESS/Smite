
Statement LoadMonster{fileName$}
    Shared monsters()
    Shared aliveMonsters()
    resetlist monsters()

    AddItem monsters()
    monsters()\name = "Combat Droid"
    monsters()\hp = 25
    monsters()\xp = 20
    monsters()\damage = 5
    ; monsters()\frameIndex[0] = 4 :  monsters()\frameIndex[1] = 5 :  monsters()\frameIndex[2] = 6
    ; monsters()\frameIndex[3] = 7 :  monsters()\frameIndex[4] = 0 :  monsters()\frameIndex[5] = 0 
    QAMIGA
    shapeIndex.w = #monstershapes
    MonstFile.s = "assets/" + fileName$+".monst"
    outfile.s = "assets/" + fileName$ + ".monshp"
    palfile.s = "assets/" + fileName$ + ".monpal"
    processed.s = "assets/" + fileName$ + ".moninf"
    if (ReadFile(0,processed.s))
        LoadShapes #monstershapes, outfile.s
        ;LoadPalette 1, palfile.s
        ;AddItem monsters()
        ReadMem 0, monsters(), SizeOf .Monster
        CloseFile 0
    else
        if(ReadFile(0,MonstFile.s))
            BitMap #spriteBitmap,240,176,7
            Use BitMap #spriteBitmap
            cls 0
            colourCount =0
            wallsetCount = 0
            tileCount =0
            dummy.b =0
            r.w =0
            g.w = 0
            b.w = 0
            ReadMem 0, &dummy, 1
            ReadMem 0, &dummy, 1
            ReadMem 0, &dummy, 1
            ReadMem 0, &colourCount,1
            dbugprintval{colourCount}
            InitPalette 2, 256
            For c=1 To colourCount
                ReadMem 0,&dummy,1
                r = dummy
                if r< 0 then r= 256 + r
                ReadMem 0,&dummy,1
                g = dummy 
                if g< 0 then g=256 + g
                ReadMem 0,&dummy,1
                b = dummy 
                if b< 0 then b=256 + b
                dbugprintstring{"COL: "+Str$(c)+" R:" +Str$(r)+" G:" +Str$(g)+ " B:" +Str$(b)}
                AGAPalRGB 2,c-1,r,g,b
            Next
            ;use palette 8
            totalTileCount.w = 0
            ReadMem 0,&totalTileCount,2
            dbugprintstring{"Wallset Count: "+Str$(totalTileCount)}
            ;Dim List walls.Wallset(totalTileCount)

            ReadMem 0,&wallsetCount, 1
            dbugprintstring{"Wallset Count: "+Str$(wallsetCount)}
            For w=1 To wallsetCount
                ReadMem 0,&tileCount,1
                dbugprintstring{"Tile Count: "+Str$(tileCount)}
                For tile=1 To tileCount
                    cls 0
                    dbugprintval{Loc(0)}
                    ReadMem 0, &walltype.b,1
                    ReadMem 0, &locationX.b,1 : ReadMem 0, &locationY.b,1
                    ReadMem 0, &screenX.w,2 : ReadMem 0, &screenY.w,2
                    ReadMem 0, &width.w,2 : ReadMem 0, &height.w,2
                    offset.w = (5*(w-1)) + (tile-1)
                    monsters()\frameIndex[offset] = shapeIndex
                    monsters()\width[offset] = width : monsters()\height[offset] = height
                    monsters()\screenX[offset] = screenX : monsters()\screenY[offset] =screenY
                    idx.b =0
                    For py.w=1 To height.w
                    ;dbugprintval{py.w}
                        For px.w=1 To width.w
                            ;dbugprintval{px.w}
                            ReadMem 0,&idx,1
                            ;dbugprintval{idx}
                            If idx <> 44
                                Plot offx+px.w,offy+py.w,idx
                            EndIf
                        Next
                    Next
                  ; SaveBitmap #spriteBitmap,"Assets/mon"+str$(offset)+".iff",2
                    GetaShape shapeIndex,1, 1, width.w,height.w
                    shapeIndex+1
                    
                next
            next

        
            Free BitMap #spriteBitmap

            SavePalette 2,palfile
            SaveShapes #monstershapes, shapeIndex, outfile
            CloseFile 0
            if OpenFile(0,processed.s)
                    WriteMem 0, monsters(), SizeOf .Monster
            endif
            CloseFile 0
   
        else
            ;CERR "Can't find matching Data for monster"
        endif
    end if

    dbugprintstring{"Spawning a monster"}
    resetlist aliveMonsters()
    AddItem aliveMonsters()
    USEPATH aliveMonsters()

    \x=6
    \y=2
    \archetype = monsters(0)
    \hp = \archetype\hp
    
       AddItem aliveMonsters()
    USEPATH aliveMonsters()

    \x=4
    \y=8
    \archetype = monsters(0)
    \hp = \archetype\hp

       AddItem aliveMonsters()
    USEPATH aliveMonsters()

    \x=10
    \y=26
    \archetype = monsters(0)
    \hp = \archetype\hp

    AddItem aliveMonsters()
    USEPATH aliveMonsters()

    \x=13
    \y=27
    \archetype = monsters(0)
    \hp = \archetype\hp

    ; AddItem aliveMonsters()
    ; USEPATH aliveMonsters()

    ; \x=12
    ; \y=27
    ; \archetype = monsters(0)
    ; \hp = \archetype\hp

    ; AddItem aliveMonsters()
    ; USEPATH aliveMonsters()

    ; \x=14
    ; \y=27
    ; \archetype = monsters(0)
    ; \hp = \archetype\hp


    dbugprintstring{"Done"}
    BLITZ
End Statement

Function .w monsterMove{originalPos.w, dir.b}
    Shared *currentLevel.Level
    shared gd.GameData
    shared bkgindex
	x.b=0
    y.b=0
	x = originalPos.w MOD 32;
	y = originalPos.w/32;div(int(pos), 32).quot;
	;dbugprintstring{ str$(x) + " " + str$(y)}

    Select dir.b
        Case 0
            y-1
        case 1
            x+1
        case 2
            y+1
        case 3
            x-1
        Default
    End Select
    newPos.w = ((y & $1f) * 32) + (x & $1F) 
    if newPos = gd\playerLocation
    	function return originalPos;
    end if

    ;long newPos = ((y & 0x1f) * 32) + (x & 0x1F);

	wmi.b = *currentLevel\walldata[newPos*4]
	if (wmi = 1 or wmi = 2 OR wmi = 4)
		function return originalPos;
	end if
    ;dbugprintstring{ str$(x) + " " + str$(y)}
	
    function return newPos;
End Function

statement doMonsterLogic{}
    shared aliveMonsters()
    resetlist aliveMonsters()
    while Nextitem(aliveMonsters())
    usepath aliveMonsters()

    ; can I see the player?
    ; todo
    ; can I move forwards
    curpos.w = ((\y & $1f) * 32) + (\x & $1F)
    newpos.w = monsterMove{curpos, \facing} 
    dbugprintstring{"monster " + str$(curpos) + " " + str$(newpos)}
    
    if (newpos <> curpos)
    ; Choose random direction to turn.
        \x = newpos.w MOD 32;
	    \y = newpos.w/32;div(int(pos), 32).quot;
	else
        \facing+1
        \facing = \ facing Mod 4
    end if
    wend
end statement