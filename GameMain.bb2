;game main
XINCLUDE "debug.bb2"
XINCLUDE "types.bb2"
XINCLUDE "PlayerActions.bb2"
XINCLUDE "Monster.bb2"
XINCLUDE "Map.bb2"
XINCLUDE "Graphics.bb2"
XINCLUDE "Title.bb2"
XINCLUDE "Intro.bb2"
XINCLUDE "script.bb2"
XINCLUDE "NoBattery.bb2"
XINCLUDE "Escaped.bb2"
XINCLUDE "GameState.bb2"

Statement loadGameAssets{}
    shared *currentLevel.Level, currentBuffer,  walls()
    ; These populate the two arrays needed to draw the scene
    dbugprintstring{"Pre Fill"}
    preFillFacing{}
    preFillPosData{}
    preFillItemPos{}
     ; Demo map for development
    dbugprintstring{"Make Demo Map"}
     
    *currentLevel = MakeDemoMap{}
    CreateLevelEvents{}
    ;*currentLevel = LoadMap{"maze1.maz"}
    dbugprintstring{"Load Assets"}

    res.b = LoadUIGfx{"ui_icons"}
       loadItemGraphics{"items"}
    loadItemDetails{}
    LoadFrame{"assets/" + "playfield2.iff"}
    loadWalls{"factory"}
    LoadDecorations{"prop"}
    ;loadWalls{"doors"}
    dbugprintstring{"Doors"}
    LoadDoors{"Doors"}
    dbugprintstring{"Reset Walls"}
    InitDecorations{}
    InitProps{}
    ResetList walls()

    dbugprintstring{"Present Screen"}
    BLITZ
    AGA_FADE_OUT{0,1,2,1,0}
    ;DisplayPalette 0,1
    !cycleBuffer{currentBuffer}
    Cls 0
    BlockScroll 0,0,320,256,0,0,#guiframe
    ;ShowBitMap #guiframe
    drawView{}

    !cycleBuffer{currentBuffer}
    Cls 0
    BlockScroll 0,0,320,256,0,0,#guiframe
    drawView{}
    
    AGA_FADE_IN{0,1,2,30,0}

end statement

statement unloadGameAssets{}
    ; free assets here
      AGA_FADE_OUT{0,1,2,30,0}
end statement

Statement InitMainScreens{}
    ; Create a front and back buffer of 256 colours
    BitMap #frontbuffer,320,256,8
    BitMap #backbuffer,320,256,8
    Buffer #frontbuffer, 32767
    Buffer #backbuffer, 32767
    
    ; init our palette
    InitPalette 1,256

    mx.w = 0
    my.w = 0
    MouseArea 0,0,320,256
    InitCopList 0,44,256,$10008,8,256,0
    CreateDisplay 0
    DisplayPalette 0,1
    res.b = LoadBitmapFont{"font8x8"}
    loadItemGraphics{"items"}
    GetaSprite 0,#UIItems+22
    for i =0 to 25
        dbugprintval{i}
        GetaSprite i, #UIItems+i
    next
   
End Statement

Statement doMainGameLoop{}
    shared gd.GameData, doRedraw,gShowMap
; test for player movement
    if handleMovementKeys{}
        gd\playerFacing = gd\playerFacing MOD 4
        doRedraw = 2
        gShowMap = 0
        gd\player\sp - 1
        ; draw the view if required
    endif

    action.b =  handleButtons{}
    if action = 1 ; we moved
        gd\playerFacing = gd\playerFacing MOD 4
        doRedraw = 2
        gShowMap = 0
        gd\player\sp-1
    endif
    if action = 2 ; Show Map.
        doRedraw = 2
    endif


    ;dbugprintstring {"Mouse X" + str$(mX) + " Mouse Y:" + str$(my)}
        AGAPalRGB  1,3,0,255,0
        DisplayPalette 0,1
    if doRedraw > 0

        drawView{}   
        drawDecals{}
        drawItems{} 
        doRedraw-1
        drawRadar{}
        drawMiniMap{}
        if (gShowMap)
            drawMap{}
        endif
   
    endif
        drawBattery{} 

        
end Statement

Statement setGameState{newState}
    shared gameState
    if gameState = #gs_intro
        unloadIntro{}
    endif

    if gameState = #gs_game
        unloadGameAssets{}
    endif

    if gameState = #gs_title
        unloadMainTitle{}
    endif

    If gameState = #gs_deadBattery
        unloadNoBattery{}
    endif

    If gameState = #gs_win
        unloadWin{}
    endif

    gameState = newState

    if gameState = #gs_intro
        loadIntro{}
    endif

    if gameState = #gs_game
        loadGameAssets{}
    endif

    if gameState = #gs_title
        loadMainTitle{}
    endif

    If gameState = #gs_deadBattery
        loadNoBattery{}
    endif
    
    If gameState = #gs_win
        loadWin{}
    endif

End Statement

Statement mainLoop{}
    shared currentBuffer, gameState
    shared gd.GameData
    VWait
    mx.w = MouseX
    my.w = MouseY

    !cycleBuffer{currentBuffer}

    if gameState = #gs_game
    ; test for player movement
        doMainGameLoop{}
    endif
    if gameState = #gs_intro
        option.w = doIntro{}
        if option.w = 2
            setGameState{#gs_title}
        end if
    end if

    if gameState = #gs_title
        option.w = doMainTitle{}
        if option.w = 1
            setGameState{#gs_game}
        endif
    endif

    if gameState = #gs_deadBattery
        option.w = doNoBattery{}
        if option.w = 2
            setGameState{#gs_title}
        endif
    endif

    if gameState = #gs_win
        option.w = doWin{}
        if option.w = 2
            setGameState{#gs_title}
        endif
    endif
    
    ;drawBitmapText{mx.w, my.w, "X."+str$(mx.w) + " Y." +str$(my.w)}
    ;  px = gd\playerLocation MOD 32;
    ; py = gd\playerLocation / 32;div(int(pos), 32).quot;
    ;drawBitmapText{20,200,str$(px)+" "+str$(py)}
    DisplaySprite 0,gd\mousecur,mx,my,0
    
end statement
