;game main
XINCLUDE "debug.bb2"
XINCLUDE "types.bb2"
XINCLUDE "PlayerActions.bb2"
XINCLUDE "Monster.bb2"
XINCLUDE "Map.bb2"
XINCLUDE "Graphics.bb2"
XINCLUDE "Title.bb2"
XINCLUDE "Intro.bb2"
XINCLUDE "script.bb2"
XINCLUDE "NoBattery.bb2"
XINCLUDE "Escaped.bb2"
XINCLUDE "GameState.bb2"

Statement loadGameAssets{}
    shared *currentLevel.Level, currentBuffer,  walls()
    Bitmap #wallBuffer,250,186,6
    bitmap #DungeonFloorBitmap, 480,180,5
    ; These populate the two arrays needed to draw the scene
    dbugprintstring{"Pre Fill"}
    
    preFillFacing{}
    preFillPosData{}
    preFillItemPos{}
     ; Demo map for development
    dbugprintstring{"Make Demo Map"}
     
    *currentLevel = MakeDemoMap{}
    CreateLevelEvents{}
    ;*currentLevel = LoadMap{"maze1.maz"}
    dbugprintstring{"Load Assets"}

    res.b = LoadUIGfx{"ui_icons"}
    loadItemGraphics{"items"}
    loadItemDetails{}
    LoadFrame{"assets/" + "playfield2.iff"}
    loadWalls{"facttex"}
    LoadMonster{"Monster2"}
    ;LoadMonsterGfx{"assets/Monsters.shapes"}
    LoadDecorations{"prop"}
    ;loadWalls{"doors"}
    dbugprintstring{"Doors"}
    ;LoadDoors{"Doors"}
    ;dbugprintstring{"Reset Walls"}
    InitDecorations{}
    InitProps{}
    ResetList walls()

    dbugprintstring{"Present Screen"}
    
    BLITZ
    
    use bitmap #DungeonFloorBitmap
    blit 0,0,0
    blit 1,240,0
    use bitmap currentBuffer
    free shape 0
    free shape 1

    AGA_FADE_OUT{0,1,2,1,0}
    ;DisplayPalette 0,1
    !cycleBuffer{currentBuffer}
    Cls 0
    
    ;ShowBitMap #guiframe
    drawView{}
    BlockScroll 0,0,320,256,0,0,#guiframe
    BlockScroll 0,0,240,176,8,6,#wallBuffer
    
    !cycleBuffer{currentBuffer}
    Cls 0
    BlockScroll 0,0,320,256,0,0,1-currentBuffer
    ;drawView{}
    

    AGA_FADE_IN{0,1,2,30,0}

end statement

statement unloadGameAssets{}
    ; free assets here
    AGA_FADE_OUT{0,1,2,30,0}

    shared walls()
    dbugprintstring {"Free Walls"}
    resetlist walls()
    while (NextItem(walls()))
        if (walls()\shapeIndex >1)
            free shape walls()\shapeIndex
        end if
    wend
    dbugprintval{ChipFree}
    dbugprintstring {"Free WallsBuffer"}
    free bitmap #wallBuffer
    ;dbugprintstring {"Free Floors"}
    free bitmap #DungeonFloorBitmap

end statement

Statement InitMainScreens{}
    ; Create a front and back buffer of 256 colours
    BitMap #frontbuffer,320,256,8
    BitMap #backbuffer,320,256,8
    
    Buffer #frontbuffer, 20000
    Buffer #backbuffer, 20000
    
    ; init our palette
    InitPalette 1,256

    mx.w = 0
    my.w = 0
    MouseArea 0,0,320,256
    InitCopList 0,44,256,$11008,8,256,-4

    CreateDisplay 0
    DisplayPalette 0,1
    res.b = LoadBitmapFont{"assets/tiny.iff"}
    loadItemGraphics{"items"}
    GetaSprite 0,#UIItems+22
    for i =0 to 25
        dbugprintval{i}
        GetaSprite i, #UIItems+i
    next
    
    for ii=0 to 35
        for i=0 to 7
        DisplayRGB 0,1,i+ii*7,(200-(i*12)),(200-(i*12)),(200-(i*9))
        next i
    next ii

   
End Statement


lastDrawn.b=0


Statement doMainGameLoop{}
    shared gd.GameData, doRedraw,gShowMap
    shared lastDrawn, currentBuffer
        
; test for player movement
   if doRedraw = 0
    if handleMovementKeys{}
        gd\playerFacing = gd\playerFacing MOD 4
        doRedraw = 2
        gShowMap = 0
        gd\player\sp - 1
        ; draw the view if required
    endif

    action.b =  handleButtons{}
    if action = 1 ; we moved
        gd\playerFacing = gd\playerFacing MOD 4
        doRedraw = 2
        gShowMap = 0
        gd\player\sp-1
    endif
    if action = 2 ; Show Map.
        doRedraw = 2
    endif
endif

    ;drawColouredText{20,20,20,200,120,"Testing, 1234 !@#$%^&*()"}
    
    if doRedraw = 1
        ;dbugprintstring{"Redraw 2"}
        dbugprintstring{"Redraw " + str$(currentBuffer)}
       
        drawRadar{}
        drawMiniMap{}

        BlockScroll 0,0,240,176,8,8,#wallBuffer

        if (gShowMap)
            drawMap{}
        endif
        doRedraw = 0
    endif
    
    if doRedraw = 2
        ;!cycleBuffer{currentBuffer}
        
; Reset font colour
    AGAPalRGB 1,1,255,255,255
    DisplayPalette 0,1
        lastDrawn = 1-currentBuffer
        dbugprintstring{"Redraw " + str$(currentBuffer)}
        drawView{}   
        drawDecals{}
        drawItems{} 
        doRedraw=1
        drawRadar{}
        drawMiniMap{}
        BlockScroll 0,0,240,176,8,8,#wallBuffer
        if (gShowMap)
            drawMap{}
        endif
        
    end if
         drawBattery{} 

      px = gd\playerLocation MOD 32;
	py = gd\playerLocation/32;div(int(pos), 32).quot;
    drawBitmapText{150,245, "X: " + str$(px) + " Y: " + str$(py)}
        
end Statement
 
Statement setGameState{newState}
    shared gameState
    dbugprintstring{"Changing Game State from: "+ str$(gameState)}
    Select gameState
        case #gs_intro
            unloadIntro{}
        case #gs_game
            unloadGameAssets{}
        case #gs_title
            unloadMainTitle{}
        case #gs_deadBattery
            unloadNoBattery{}
        case #gs_win
            unloadWin{}
    end Select

    gameState = newState
    
    dbugprintstring{"Changing Game State to: "+ str$(newState)}
    Select gameState
        case #gs_intro
            loadIntro{}
        case #gs_game
            loadGameAssets{}
        case #gs_title
            loadMainTitle{}
        case #gs_deadBattery
            loadNoBattery{}
        case #gs_win
            loadWin{}
    end Select
   
End Statement

Statement mainLoop{}
    shared currentBuffer, gameState
    shared gd.GameData
    VWait
    mx.w = MouseX
    my.w = MouseY

    !cycleBuffer{currentBuffer}
    Select gameState
        case #gs_intro
            option.w = doIntro{}
            if option.w = 2
                setGameState{#gs_title}
            end if
        
        case #gs_title
            option.w = doMainTitle{}
            if option.w = 1
                setGameState{#gs_game}
            endif
        
        Case #gs_game
            doMainGameLoop{}    
        
        case #gs_deadBattery
            option.w = doNoBattery{}
            if option.w = 2
                setGameState{#gs_title}
            endif
        
        case #gs_win
            option.w = doWin{}
            if option.w = 2
                setGameState{#gs_title}
            endif

    End Select
   
    ; Draw a mouse pointer.
    DisplaySprite 0,gd\mousecur,mx,my,0
    
end statement
