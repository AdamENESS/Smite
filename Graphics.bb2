; Graphics.bb2
XINCLUDE "debug.bb2"
XINCLUDE "types.bb2"

Macro cycleBuffer
;Show `1

DisplayBitMap 0,`1
`1 = 1-`1
Use BitMap `1

UnBuffer `1
;BitMapOutput `1
;Locate 0,0
End Macro

Statement LoadFrame{filename$}
QAMIGA

ILBMinfo filename$
BitMap  #guiframe, 320,256,8
LoadBitMap #guiframe, filename$,1
BLITZ
End Statement

; only used in Building the game
; final exe will use pre-processed assets.
Statement ProcessWallset{filename$}
SHARED walls()
SHARED wallslookup()
QAMIGA
cMod.b = 16
BitMap #spriteBitmap,320,256,5
Use BitMap #spriteBitmap
BitMap #bkgndBitmap,240,180,5

wallFile.s = filename$+".wll"
outfile.s = filename$ + ".wllshp"
palfile.s = filename$ + ".wllpal"
processed.s = filename$ + ".wllinf"
dbugprintstring{wallFile.s}
If ReadFile(0,wallFile.s)

    ;Do your file handling here.
    colourCount =0
    wallsetCount = 0
    tileCount =0
    dummy.b =0
    r.w =0
    g.w = 0
    b.w = 0
    shapeIndex.w=2 ; skip 0,1 it is for the background
    ; these just read the 3 letter acronym
    ReadMem 0, &dummy, 1
    ReadMem 0, &dummy, 1
    ReadMem 0, &dummy, 1
    
    ; read the colour count

    ReadMem 0, &colourCount,1
    dbugprintval{colourCount}
    InitPalette 1, 64
    For c=1 To colourCount
        ReadMem 0,&dummy,1
        r = dummy
        if r< 0 then r=256+r
        ReadMem 0,&dummy,1
        g = dummy 
        if g< 0 then g=256+g
        ReadMem 0,&dummy,1
        b = dummy 
        if b< 0 then b=256+b
        dbugprintstring{"COL: "+Str$(c)+" R:" +Str$(r)+" G:" +Str$(g)+ "B:" +Str$(b)}
        AGAPalRGB 1,c-1,r*cMod,g*cMod,b*cMod
     Next

     totalTileCount.w = 0
     ReadMem 0,&totalTileCount,2
     dbugprintstring{"Wallset Count: "+Str$(totalTileCount)}
     ;Dim List walls.Wallset(totalTileCount)

     ReadMem 0,&wallsetCount, 1
     dbugprintstring{"Wallset Count: "+Str$(wallsetCount)}
     For w=1 To wallsetCount
        ReadMem 0,&tileCount,1
        dbugprintstring{"Tile Count: "+Str$(tileCount)}
        For tile=1 To tileCount
            dbugprintval{Loc(0)}
            ReadMem 0, &walltype.b,1
            ReadMem 0, &locationX.b,1 : ReadMem 0, &locationY.b,1
            ReadMem 0, &screenX.w,2 : ReadMem 0, &screenY.w,2
            ReadMem 0, &width.w,2 : ReadMem 0, &height.w,2
            If walltype.b = 1 OR walltype.b = 4 OR walltype.b = 5 OR walltype.b = 0
                If AddItem (walls())

                    dbugprintval{Loc(0)}
                    walls()\walltype = walltype.b
                    walls()\locationX = locationX.b : walls()\locationY = locationY.b
                    walls()\screenX = screenX.w : walls()\screenY = screenY.w
                    walls()\width = width.w : walls()\height = height.w
                    walls()\shapeIndex = shapeIndex
                 
                EndIf
            Endif
        
            offx.w =0
            offy.w= 0
            skipCol.b=-1
            If walltype.b = 1 OR walltype.b = 4 OR walltype.b = 5
            Use BitMap #spriteBitmap
            Cls 0
            Else
            Use BitMap #bkgndBitmap
            skipCol.b = 0
            offx = screenX
            offy = screenY
            EndIf
             dbugprintstring{"Wall Size: " + str$(width.w) + " Height:" + str$(height.w)}
            For py.w=1 To height.w
            ;dbugprintval{py.w}
                For px.w=1 To width.w
                    ;dbugprintval{px.w}
                    ReadMem 0,&idx,1
                    If idx <> skipCol
                        Plot offx+px.w,offy+py.w,idx
                    EndIf
                Next
            Next
            If walltype.b = 1 OR walltype.b = 4 OR walltype.b = 5 OR walltype.b = 0
                GetaShape shapeIndex,1, 1, width.w,height.w
                shapeIndex+1
            EndIf
        Next

     Next
    CloseFile 0
    Use BitMap #bkgndBitmap
    GetaShape 0, 1,1,239,179 ; background frame 1
    GetaShape 1, 1,1,239,179 ; background frame 2
    XFlip 1                  ; fliping the background for when you walk or turn to make it look that you are moving

    SaveShapes 0,shapeIndex,outfile.s
    SavePalette 1, palfile.s

    ; Write the data for the walls that we can load it faster next time.
    if OpenFile(0,processed.s)
        ;Do your file handling here.
        sizeWall.w = SizeOf .Wallset
        ResetList walls()
        count.w =0;
        while(NextItem (walls()))
            count+1
        wend

        ; write number of tiles
        WriteMem 0,&count.w,2

        ResetList walls()
        
       While(NextItem (walls()))
            WriteMem 0, walls(), sizeWall.w
        wend

        CloseFile 0
    else
        ;The file was not successfully opened. Do your error handling here.
    endif

    
    Free BitMap #bkgndBitmap
    Free BitMap #spriteBitmap
Else
    ;The file was not successfully opened. Do your error handling here.
EndIf
BLITZ
End Statement



Statement loadWalls{filename$}
shared walls()
QAMIGA
sizeWall.w = SizeOf .Wallset

shapefile.s = filename$ + ".wllshp"
palfile.s = filename$ + ".wllpal"
processed.s = filename$ + ".wllinf"

dbugprintstring {"Loading - Palette: " + palfile.s}
LoadPalette 1, palfile.s,32
dbugprintstring {"Loading - Shapes: " + shapefile.s}
LoadShapes 0,shapefile.s

dbugprintstring {"Loading - WallData: " + processed.s}
if ReadFile(0, processed.s)
    ;Do your file handling here.
    count.w =0
    ReadMem 0, &count.w,2
    ResetList walls()
    for idx.w=0 to count.w
        AddItem walls() 
        ReadMem 0, walls(), sizeWall.w
    next
    CloseFile 0
    ResetList walls()
else
    ProcessWallset{filename$}    
endif

BLITZ
End Statement

Statement LoadDoors{fileName$}
QAMIGA
BLITZ
End Statement

Statement LoadDecorations{fileName$}
QAMIGA
Blitz
End Statement

Statement LoadMonsterGfx{fileName$}
QAMIGA
BLITZ
End Statement

Function LoadUIGfx{fileName$}
QAMIGA
    shapeIndex.w = #UIShapeStart
    dbugprintval{shapeIndex}
    returntype.b =0
    shapefile.s = fileName$ + ".uishp"
    shapesource.s = fileName$ + ".iff"
    dbugprintstring{"Loading UI Shapes"}
 if Exists (shapefile)
       dbugprintstring {"Baked " + shapefile.s }
          LoadShapes shapeIndex.w, shapefile
        returntype = -1
    else
        dbugprintstring {"Building " + shapesource.s }
        ILBMinfo shapesource.s
        BitMap 3, ILBMWidth,ILBMHeight,ILBMDepth
        LoadBitMap 3,shapesource.s
        dbugprintval{ILBMWidth}
        dbugprintval{ILBMHeight}
        dbugprintval{ILBMDepth}
        Use BitMap 3
        for i=0 to 11
            dbugprintval{i}
            GetaShape shapeIndex.w, 0 + (i*16), 2,16,32
            shapeIndex+1 
            dbugprintval{shapeIndex}
        next
        for i =0 to 4
            dbugprintval{i}
            GetaShape shapeIndex.w, 2+(37*i),40,32,32
            shapeIndex+1
            GetaShape shapeIndex.w, 2+(37*i),74,32,32
            shapeIndex+1
        next
        Free BitMap 3
        SaveShapes #UIShapeStart, shapeIndex.w, shapefile.s 
        returntype = -1
    endif
BLITZ
function return returntype.b
End Function


XINCLUDE "fade.bb2"